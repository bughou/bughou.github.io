<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on bughou的笔记</title>
    <link>https://bughou.github.io/blog/</link>
    <description>Recent content in Blogs on bughou的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/bughou&#34;&gt;bughou&lt;/a&gt; 2017</copyright>
    <lastBuildDate>Sat, 04 Dec 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bughou.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>图形文字</title>
      <link>https://bughou.github.io/blog/graphic-chars/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bughou.github.io/blog/graphic-chars/</guid>
      <description> check: ✅ cross: ❌  网站：
 UTF8图标(utf8icons.com) 符号大全(fhdq.net) 表格符号(wikipedia.org)  表格
┌───────────┐ ┏ ━ ━ ━ ━ ━ ┓ │ gray │ ┃ black ┃ ├───┬───┬───┤ ┣ ━ ┳ ━ ┳ ━ ┫ │ │ │ │ ┃ ┃ ┃ ┃ ├───┼───┬───┤ ┣ ━ ╋ ━ ╋ ━ ┫ │ │ │ │ ┃ ┃ ┃ ┃ └───┴───┴───┘ ┗ ━ ┻ ━ ┻ ━ ┛  流程图
(待提交) ⇩ 提交 (待审核) 拒绝⇨ (退回) ⇩ 通过 (完成) A ━ ━ B ━➢ C ┃ ┣ ━ ━ D ━➣ E ┃ ┗ ━ ━ F ━➤ G ➢ ➣ ➤ ⬅ ⬆ ⬇ ⇦ ⇧ ⇨ ⇩  </description>
    </item>
    
    <item>
      <title>知识图谱</title>
      <link>https://bughou.github.io/blog/knowledge/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bughou.github.io/blog/knowledge/</guid>
      <description>知识图谱  body { padding: 2em auto; } h3 { text-align: center; } table { margin: 1em auto; border-spacing: 0; border-collapse: collapse; } th, td { padding: 10px; border: 2px solid gray; }    知识图谱   开发 语言 包管理 代码格式化 静态检查 转译 构建   JavasSript  npm
Yarn   Prettier   ESLint
TypeScript   Babel   webpack
esbuild    Golang  go mod   gofmt   golint</description>
    </item>
    
    <item>
      <title>Docker镜像名称</title>
      <link>https://bughou.github.io/blog/docker-image-name/</link>
      <pubDate>Fri, 20 Sep 2019 16:35:41 +0800</pubDate>
      
      <guid>https://bughou.github.io/blog/docker-image-name/</guid>
      <description>docker的镜像名称可以包含一个可选的registry域名。如果没有，则使用docker.io。 因为镜像名称并没有包含https://之类的协议前缀，那docker是怎么区分这个镜像名称是否包含了registry域名的呢？ 根据docker的开源registry的文档的说明：
 Classically, repository names have always been two path components where each path component is less than 30 characters. The V2 registry API does not enforce this. The rules for a repository name are as follows:
 A repository name is broken up into path components. A component of a repository name must be at least one lowercase, alpha-numeric characters, optionally separated by periods, dashes or underscores. More strictly, it must match the regular expression [a-z0-9]+(?</description>
    </item>
    
    <item>
      <title>Pgpool-II的相关疑惑</title>
      <link>https://bughou.github.io/blog/pgpool2/</link>
      <pubDate>Fri, 06 Sep 2019 18:19:16 +0800</pubDate>
      
      <guid>https://bughou.github.io/blog/pgpool2/</guid>
      <description>Q: 为啥需要&amp;rdquo;pool_passwd&amp;rdquo;这么个东西？为啥不能拿着前端的密码直接去后端认证？
A: 1. 前后端的密码认证是加了随机盐的，参考AuthenticationMD5Password。要连接多个后端时，盐不一样，不能直接将前端输入传给后端。
2. 复用已缓存的连接时，不能拿着前端的密码去后端再认证一遍。（或许可以将已缓存的连接的密码也缓存着？）
3. 后端Postgresql每次去认证都会fork一个新进程，如果认证失败，开销太大？
4. Pgpool-II 4.0以后，支持前端trust，后端密码认证，这样就拿不到密码了。
5. 如果开启了健康检查，需要用到密码。</description>
    </item>
    
    <item>
      <title>腾讯面试</title>
      <link>https://bughou.github.io/blog/interview/</link>
      <pubDate>Wed, 20 Dec 2017 09:29:11 +0800</pubDate>
      
      <guid>https://bughou.github.io/blog/interview/</guid>
      <description>昨晚面试，暴露了我的一个问题，浮于表面，对基础概念的实现完全没有深入研究。 记录一下面试过程：
1. 跳槽多 面试官坐下来，看我的简历，就说你呆过的公司挺多啊。让我解释一下为啥换了这多公司。于是我开始一家一家的解释离职原因。面试官也没说啥。现在想起来，我应该总结一下，到目前为止呆过5家公司，第一次辞职是上海回成都，第二次是因为自己创业，第三次是因为被朋友挖走了，第四次是因为公司高层斗争不发工资了。
2. atoi实现 我说比较了解C，C相对C++简单很多。面试官说那你用C实现一下字符串转整数。正下笔的时候，发现C的函数定义是怎么样的都想不起来了，窘得不行。赶紧说好多年没写过C、语法都忘了，说用golang实现吧，面试官同意了。开始用golang实现：
func atoi(s string) (result int) { d := 1 for i := 0; i &amp;lt; len(s); i++ { d *= 10 result += s[i] * d } return } 在写完也没检查立即就给面试官了，纸上字迹比较潦草，就给面试官解说我的思路。正准备说思路，发现不对啊，立即给面试官说，这里不对，应该是从右向左遍历，于是改成下面这样：
func atoi(s string) (result int) { d := 1 for i := len(s) - 1; i &amp;gt;= 0; i++ { d *= 10 result += s[i] * d } return } 着急忙荒的i++也忘了改成i&amp;ndash;了。开始解释我的思路，面试官也没说啥，就说用Golang确实比用C简单很多，然后我说就这个功能来说用golang和用C，应该是一样的，没啥区别，他说C语言里你怎么遍历字符串，我一下想起来，这里取字符串长度用了len，而C没有这个内置方法，确实golang省事不少。后来回去的路上，突然想起来，不对啊， d *= 10 应该放在循环体的末尾啊，也不知道面试官看出来没有。现在想来，这实现还是有很大问题啊，完全没有错误处理啊。面试的时候想的都是赶紧做完，太仓促了，很多都没考虑到，平时写代码肯定不会忘记错误处理。或许面试官也看出这些问题了，只是没指出来而已，默默在心里做了减分吧。</description>
    </item>
    
    <item>
      <title>HAProxy相关</title>
      <link>https://bughou.github.io/blog/haproxy/</link>
      <pubDate>Fri, 15 Dec 2017 21:58:42 +0800</pubDate>
      
      <guid>https://bughou.github.io/blog/haproxy/</guid>
      <description>Seamless Reloads的前世今生  https://www.haproxy.com/blog/truly-seamless-reloads-with-haproxy-no-more-hacks/</description>
    </item>
    
    <item>
      <title>Nginx相关</title>
      <link>https://bughou.github.io/blog/nginx/</link>
      <pubDate>Fri, 15 Dec 2017 21:38:42 +0800</pubDate>
      
      <guid>https://bughou.github.io/blog/nginx/</guid>
      <description>为什么nginx Worker负载不均  https://blog.cloudflare.com/the-sad-state-of-linux-socket-balancing/
 Worker默认不共享数据  https://www.nginx.com/resources/admin-guide/load-balancer/#zone</description>
    </item>
    
    <item>
      <title>Bash的ctrl&#43;c挂断信号（SIGINT）的处理备忘</title>
      <link>https://bughou.github.io/blog/bash-sigint/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bughou.github.io/blog/bash-sigint/</guid>
      <description> https://www.cons.org/cracauer/sigint.html https://unix.stackexchange.com/questions/230421/unable-to-stop-a-bash-script-with-ctrlc  </description>
    </item>
    
  </channel>
</rss>